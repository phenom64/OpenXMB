/* OpenXMB downsample compute (2x2 box filter)
 * Produces an image at approximately half resolution of the input.
 */
#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba16) uniform readonly image2D inputImage;
layout (binding = 1, rgba16) uniform writeonly image2D outputImage;

vec4 loadClamped(ivec2 p, ivec2 size) {
    p = clamp(p, ivec2(0), size - ivec2(1));
    return imageLoad(inputImage, p);
}

void main(){
    ivec2 inSize  = imageSize(inputImage);
    ivec2 outSize = imageSize(outputImage);

    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if(gid.x >= outSize.x || gid.y >= outSize.y) return;

    // Map output pixel to 2x2 neighborhood in input
    ivec2 src = gid * 2;
    vec4 s00 = loadClamped(src + ivec2(0,0), inSize);
    vec4 s10 = loadClamped(src + ivec2(1,0), inSize);
    vec4 s01 = loadClamped(src + ivec2(0,1), inSize);
    vec4 s11 = loadClamped(src + ivec2(1,1), inSize);
    vec4 avg = 0.25 * (s00 + s10 + s01 + s11);

    imageStore(outputImage, gid, avg);
}

