# cmakelists.txt for the OpenXMB project
# TM & (C) 2025 Syndromatic Ltd Britannia, Syndromatic Ltd Bharat. All rights reserved.
# Designed by Kavish Krishnakumar in Manchester.
# Licensed with the GPLv3, see LICENSE

cmake_minimum_required(VERSION 3.22)
cmake_policy(SET CMP0097 NEW)
cmake_policy(SET CMP0144 NEW)

# ANSI color codes for terminal output
string(ASCII 27 ESC)
set(COLOR_RESET   "${ESC}[0m")
set(COLOR_CYAN    "${ESC}[34m")
set(COLOR_RED     "${ESC}[31m")
set(COLOR_YELLOW  "${ESC}[33m")
set(COLOR_GREEN   "${ESC}[32m")

project(OpenXMB VERSION 1.0 LANGUAGES CXX)

message(STATUS "${COLOR_GREEN}Starting OpenXMB Builder...${COLOR_RESET}")
message(STATUS "${COLOR_YELLOW}TM & (C) 2025 Syndromatic Ltd Britannia, Syndromatic Ltd Bharat. All rights reserved.${COLOR_RESET}")

# Platform Detection
if(APPLE)
  set(PLATFORM_NAME "Mac OS X")
elseif(WIN32)
  set(PLATFORM_NAME "Windows")
elseif(UNIX)
  if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    if(EXISTS "/etc/os-release")
      file(READ "/etc/os-release" OS_RELEASE_CONTENT)
      string(REGEX MATCH "ID=ubuntu" IS_UBUNTU "${OS_RELEASE_CONTENT}")
      if(IS_UBUNTU)
        set(PLATFORM_NAME "SynOS")
      else()
        set(PLATFORM_NAME "Linux")
      endif()
    else()
      set(PLATFORM_NAME "Linux")
    endif()
  else()
    set(PLATFORM_NAME "Unix (BSDs)")
  endif()
else()
  set(PLATFORM_NAME "Unknown")
endif()
message(STATUS "Running on ${COLOR_RED}${PLATFORM_NAME}${COLOR_RESET}")

if(APPLE)
  list(APPEND CMAKE_PREFIX_PATH "/usr/local")
  set(FFMPEG_ROOT "/usr/local/opt/ffmpeg")
  add_compile_options(-isysroot "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk")
endif()
if(NOT DEFINED BUILD_VERSION)
  set(BUILD_VERSION ${PROJECT_VERSION})
endif()
message(STATUS "${COLOR_CYAN}Building version ${BUILD_VERSION}${COLOR_RESET}")

# --- Feature Options ---
option(ENABLE_BROWSER "Enable CEF-based browser module" OFF)
option(ENABLE_VIDEO_PLAYER "Enable FFmpeg video player" ON)
option(ENABLE_DISC_MEDIA "Enable DVD/Blu-ray support" OFF)
option(ENABLE_LIBRETRO "Enable libretro core host" OFF)
set(HWACCEL "auto" CACHE STRING "Preferred hardware video decode backend")
set_property(CACHE HWACCEL PROPERTY STRINGS auto off vaapi d3d11 videotoolbox)

# Set color for ENABLE_BROWSER
if(ENABLE_BROWSER)
    set(BROWSER_COLOR "${COLOR_GREEN}")
else()
    set(BROWSER_COLOR "${COLOR_RED}")
endif()

# Set color for ENABLE_VIDEO_PLAYER
if(ENABLE_VIDEO_PLAYER)
    set(VIDEO_PLAYER_COLOR "${COLOR_GREEN}")
else()
    set(VIDEO_PLAYER_COLOR "${COLOR_RED}")
endif()

# Set color for ENABLE_DISC_MEDIA
if(ENABLE_DISC_MEDIA)
    set(DISC_MEDIA_COLOR "${COLOR_GREEN}")
else()
    set(DISC_MEDIA_COLOR "${COLOR_RED}")
endif()

# Set color for ENABLE_LIBRETRO
if(ENABLE_LIBRETRO)
    set(LIBRETRO_COLOR "${COLOR_GREEN}")
else()
    set(LIBRETRO_COLOR "${COLOR_RED}")
endif()

message(STATUS "${COLOR_YELLOW}Enabled features: ${COLOR_RESET}BROWSER=${BROWSER_COLOR}${ENABLE_BROWSER}${COLOR_RESET} VIDEO=${VIDEO_PLAYER_COLOR}${ENABLE_VIDEO_PLAYER}${COLOR_RESET} DISC=${DISC_MEDIA_COLOR}${ENABLE_DISC_MEDIA}${COLOR_RESET} LIBRETRO=${LIBRETRO_COLOR}${ENABLE_LIBRETRO}${COLOR_RESET} HWACCEL=${HWACCEL}${COLOR_RESET}")

set(CMAKE_CXX_SCAN_FOR_MODULES ON)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
add_compile_options(-fPIC)
add_compile_options(-Wno-nullability-completeness)

# Propagate HWACCEL preference for conditional code
add_compile_definitions(OPENXMB_HWACCEL_STR="${HWACCEL}")

find_package(glm REQUIRED)
find_package(Freetype REQUIRED)
find_package(PkgConfig REQUIRED)
find_package(Gettext REQUIRED)
find_package(fmt REQUIRED)
pkg_check_modules(FFMPEG REQUIRED IMPORTED_TARGET libavcodec libavformat libavutil libswscale libswresample)

include(FetchContent)

if(APPLE)
  find_package(Vulkan REQUIRED)
endif()

FetchContent_Declare(i18n++
  GIT_REPOSITORY https://github.com/JnCrMx/i18n-cpp.git
  GIT_TAG        trunk    #trunk = master branch
)

if(APPLE)
  include_directories(/usr/local/include)
endif()

# We are using our own stable, maintained fork of the rendering engine.
# This version has a corrected build system that properly uses the latest
# Vulkan-HPP, resolving all previous dependency and compilation issues.
set(DREAMS_BUILD_WITH_POSIX_THREADS ON CACHE BOOL "" FORCE)

FetchContent_Declare(dreamrender
  GIT_REPOSITORY https://github.com/phenom64/AuroreEngine.git
  GIT_TAG        master
  OVERRIDE_FIND_PACKAGE
)

FetchContent_Declare(argparse
  GIT_REPOSITORY https://github.com/p-ranav/argparse.git
  GIT_TAG        v3.1
)

FetchContent_Declare(
  nlohmann_json
  GIT_REPOSITORY https://github.com/nlohmann/json.git
  GIT_TAG        v3.12.0
)

FetchContent_GetProperties(dreamrender)
if(NOT dreamrender_POPULATED)
  FetchContent_Populate(dreamrender)
  add_subdirectory(${dreamrender_SOURCE_DIR} ${dreamrender_BINARY_DIR})
endif()

set(DREAMS_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(DREAMS_FIND_PACKAGES OFF CACHE BOOL "" FORCE)

# For i18n++, we disable the optional tools (plugin, merge tool) and tests
# by setting these cache variables before FetchContent makes the project available.
# prevents it from needing dependencies like Clang and fmt blah blah etc.
set(BUILD_PLUGIN OFF CACHE BOOL "Disable i18n++ Clang plugin" FORCE)
set(BUILD_MERGE OFF CACHE BOOL "Disable i18n++ merge tool" FORCE)
set(BUILD_TESTING OFF CACHE BOOL "Disable i18n++ tests" FORCE)

# make both dependencies available. CMake will use the options we just set
# when it configures i18n++.
FetchContent_MakeAvailable(i18n++ argparse nlohmann_json)

set(SDL_BUILDING_LIBRARY ON CACHE BOOL "" FORCE)
find_package(SDL2 REQUIRED)
find_package(SDL2_image REQUIRED)
find_package(SDL2_mixer REQUIRED)

add_library(i18nModule STATIC)
target_sources(i18nModule PUBLIC FILE_SET CXX_MODULES FILES third_party/i18n.cppm)
target_compile_features(i18nModule PUBLIC cxx_std_20)
target_link_libraries(i18nModule PUBLIC i18n::i18n-lib)
target_compile_options(i18nModule PRIVATE -pthread)

add_library(argparseModule STATIC)
target_sources(argparseModule PUBLIC FILE_SET CXX_MODULES BASE_DIRS ${argparse_SOURCE_DIR}/module FILES ${argparse_SOURCE_DIR}/module/argparse.cppm)
target_compile_features(argparseModule PUBLIC cxx_std_23)
target_link_libraries(argparseModule PUBLIC argparse::argparse)
target_compile_options(argparseModule PRIVATE -pthread)

set(XMS_SOURCES
  src/app/shell.cpp
  src/app/components/choice_overlay.cpp
  src/app/components/main_menu.cpp
  src/app/components/message_overlay.cpp
  src/app/components/news_display.cpp
  src/app/components/progress_overlay.cpp
  src/app/components/startup_overlay.cpp
  src/app/layers/blur_layer.cpp
  src/menu/applications_menu.cpp
  src/menu/files_menu.cpp
  src/menu/settings_menu.cpp
  src/menu/users_menu.cpp
  src/render/shaders.cpp
  src/config.cpp
  src/main.cpp
  src/utils.cpp
  src/programs.cpp
)
set(XMS_MODULE_SOURCES
  src/app/module.cppm
  src/app/shell.cppm
  src/app/component.cppm
  src/app/components/choice_overlay.cppm
  src/app/components/main_menu.cppm
  src/app/components/message_overlay.cppm
  src/app/components/news_display.cppm
  src/app/components/progress_overlay.cppm
  src/app/components/startup_overlay.cppm
  src/app/layers/blur_layer.cppm
  src/config.cppm
  src/constants.cppm
  src/menu/applications_menu.cppm
  src/menu/base.cppm
  src/menu/files_menu.cppm
  src/menu/settings_menu.cppm
  src/menu/users_menu.cppm
  src/menu/utils.cppm
  src/programs.cppm
  src/programs/base_viewer.cppm
  src/programs/image_viewer.cppm
  src/programs/text_viewer.cppm
  src/render/module.cppm
  src/render/shaders.cppm
  src/render/components/wave_renderer.cppm
  src/utils.cppm
)

if(ENABLE_VIDEO_PLAYER)
  list(APPEND XMS_MODULE_SOURCES src/programs/video_player.cppm)
  add_compile_definitions(OPENXMB_ENABLE_VIDEO_PLAYER=1)
else()
  add_compile_definitions(OPENXMB_ENABLE_VIDEO_PLAYER=0)
endif()

if(ENABLE_BROWSER)
  list(APPEND XMS_MODULE_SOURCES src/modules/browser.cppm)
  add_compile_definitions(OPENXMB_ENABLE_BROWSER=1)
else()
  add_compile_definitions(OPENXMB_ENABLE_BROWSER=0)
endif()

if(ENABLE_LIBRETRO)
  list(APPEND XMS_MODULE_SOURCES src/modules/libretro.cppm)
  add_compile_definitions(OPENXMB_ENABLE_LIBRETRO=1)
else()
  add_compile_definitions(OPENXMB_ENABLE_LIBRETRO=0)
endif()

if(ENABLE_DISC_MEDIA)
  list(APPEND XMS_MODULE_SOURCES src/modules/disc.cppm)
  add_compile_definitions(OPENXMB_ENABLE_DISC_MEDIA=1)
else()
  add_compile_definitions(OPENXMB_ENABLE_DISC_MEDIA=0)
endif()
set(XMS_SHADERS
  shaders/blur.comp
  shaders/wave.vert
  shaders/wave.frag
  shaders/yuv420p_decode.comp
)

add_executable(XMS ${XMS_SOURCES})
target_sources(XMS PUBLIC
  FILE_SET CXX_MODULES
  BASE_DIRS src
  FILES ${XMS_MODULE_SOURCES}
)

target_compile_options(XMS PRIVATE -pthread)

target_include_directories(XMS PRIVATE include/ ${FFMPEG_INCLUDE_DIRS} ${nlohmann_json_SOURCE_DIR}/include)
if(APPLE)
  target_include_directories(XMS PRIVATE ${Vulkan_INCLUDE_DIRS})
endif()

target_compile_options(XMS PRIVATE --embed-dir=${CMAKE_CURRENT_BINARY_DIR}/shaders)
target_compile_options(XMS PRIVATE --embed-dir=${CMAKE_CURRENT_BINARY_DIR})

target_link_libraries(XMS PRIVATE dreams::dreamrender)
target_link_libraries(XMS PRIVATE dreams::sdl2Module)
target_link_libraries(XMS PRIVATE dreams::glmModule)
target_link_libraries(XMS PRIVATE dreams::VulkanHppModule)
target_link_libraries(XMS PRIVATE dreams::vmaModule)
target_link_libraries(XMS PRIVATE dreams::spdlogModule)
target_link_libraries(XMS PRIVATE Freetype::Freetype)
target_link_libraries(XMS PRIVATE i18nModule)
target_link_libraries(XMS PRIVATE argparseModule)
target_link_libraries(XMS PRIVATE nlohmann_json::nlohmann_json)

target_link_directories(XMS PRIVATE ${FFMPEG_LIBRARY_DIRS})

target_link_libraries(XMS PRIVATE ${FFMPEG_LIBRARIES})
target_link_libraries(XMS PRIVATE i18n::i18n-lib)
target_link_libraries(XMS PRIVATE fmt::fmt)

if(APPLE)
  target_link_libraries(XMS PRIVATE ${Vulkan_LIBRARIES})
  find_library(ICONV_LIBRARY iconv)
  if(ICONV_LIBRARY)
    target_link_libraries(XMS PRIVATE ${ICONV_LIBRARY})
  endif()
  target_link_libraries(XMS PRIVATE "-framework CoreVideo -framework Cocoa -framework IOKit -framework Carbon -framework ForceFeedback -framework Metal")
endif()

if(UNIX AND NOT APPLE)
  target_link_libraries(XMS PRIVATE dl X11)
endif()

foreach(shader ${XMS_SHADERS})
  dreams_add_shader(XMS ${shader})
endforeach()
target_include_directories(XMS PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/shaders)

include(GNUInstallDirs)

# =============================================================================
# --- Installation ---
# =============================================================================
include(GNUInstallDirs)

# We rename the final executable to "XMS.bin". A launcher script named "XMS"
# will be created to set up the environment and run this binary.
set_target_properties(XMS PROPERTIES OUTPUT_NAME "XMS.bin")

# On Unix platforms (macOS, Linux), handle all deployment steps.
if(UNIX)
    # On macOS, set the RPATH so the executable can find Homebrew libraries.
    # This must be done BEFORE the install() command for the target.
    if(APPLE)
        find_package(Vulkan REQUIRED)
        # Using @executable_path makes the application more portable by telling
        # the dynamic linker to look for libraries relative to the executable's location.
        # We also add the Vulkan library's actual directory as a fallback.
        get_filename_component(VULKAN_LIB_DIR ${Vulkan_LIBRARIES} DIRECTORY)
        set_target_properties(XMS PROPERTIES
            INSTALL_RPATH "@executable_path/../lib;${VULKAN_LIB_DIR}"
        )
    endif()

    # Install the main executable binary.
    install(TARGETS XMS
        RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
    )

    # Install the default config.json so the launcher script can copy it on first run.
    install(
        FILES ${CMAKE_CURRENT_SOURCE_DIR}/config.json
        DESTINATION "${CMAKE_INSTALL_DATADIR}/OpenXMB"
    )

    # Install assets from interfaceFX (icons, sounds, fonts) into share/shell
    install(CODE [[
      file(MAKE_DIRECTORY "${CMAKE_INSTALL_FULL_DATADIR}/shell/icons")
      file(MAKE_DIRECTORY "${CMAKE_INSTALL_FULL_DATADIR}/shell/sounds")
    ]])
    # Fonts
    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/TypefaceServer/Play-Regular.ttf
            DESTINATION "${CMAKE_INSTALL_DATADIR}/shell" RENAME Play-Regular.ttf)
    # Sounds
    # Use clicker sound for tick/OK feedback
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.clicker.Opt.wav")
      install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.clicker.Opt.wav
              DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/sounds" RENAME ok.wav)
    elseif(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.ui.Confirm.wav")
      # Fallback to confirm if clicker is unavailable
      install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.ui.Confirm.wav
              DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/sounds" RENAME ok.wav)
    endif()
    # Startup jingle (used by startup overlay)
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.startup.ogg")
      install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.startup.ogg
              DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/sounds" RENAME startup.ogg)
    endif()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.startup.GameBoot.wav")
      install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.startup.GameBoot.wav
              DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/sounds" RENAME startup.wav)
    endif()
    # Category icons mapping (use existing as placeholders where needed)
    set(_icon_src_dir "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/GraphicsServer/HomeMenu")
    if(EXISTS "${_icon_src_dir}")
      set(_map
        photo300.png      icon_category_photo.png
        music300.png      icon_category_music.png
        movie300.png      icon_category_video.png
        settings300.png   icon_category_settings.png
        game300.png       icon_category_game.png
        network300.png    icon_category_network.png
        friends350.png    icon_category_friends.png
      )
      list(LENGTH _map _len)
      math(EXPR _pairs "${_len}/2")
      foreach(i RANGE 0 ${_pairs})
      endforeach()
      # Install each mapped icon
      if(EXISTS "${_icon_src_dir}/photo300.png")
        install(FILES "${_icon_src_dir}/photo300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_photo.png)
      endif()
      if(EXISTS "${_icon_src_dir}/music300.png")
        install(FILES "${_icon_src_dir}/music300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_music.png)
      endif()
      if(EXISTS "${_icon_src_dir}/movie300.png")
        install(FILES "${_icon_src_dir}/movie300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_video.png)
        install(FILES "${_icon_src_dir}/movie300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_tv.png)
      endif()
      if(EXISTS "${_icon_src_dir}/settings300.png")
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_settings.png)
        # Settings screen icons (reuse as placeholder)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_settings_personalization.png)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_settings_video.png)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_settings_input.png)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_settings_debug.png)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_settings_toggle-background-blur.png)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_settings_update.png)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_settings_reset.png)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_bug.png)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_licenses.png)
        install(FILES "${_icon_src_dir}/settings300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_license.png)
      endif()
      if(EXISTS "${_icon_src_dir}/game300.png")
        install(FILES "${_icon_src_dir}/game300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_game.png)
        install(FILES "${_icon_src_dir}/game300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_application.png)
      endif()
      if(EXISTS "${_icon_src_dir}/network300.png")
        install(FILES "${_icon_src_dir}/network300.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_network.png)
      endif()
      if(EXISTS "${_icon_src_dir}/friends350.png")
        install(FILES "${_icon_src_dir}/friends350.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_users.png)
        install(FILES "${_icon_src_dir}/friends350.png" DESTINATION "${CMAKE_INSTALL_DATADIR}/shell/icons" RENAME icon_category_friends.png)
      endif()
    endif()

    # Configure our launcher script template and install it.
    configure_file(
        scripts/XMS.sh.in
        ${CMAKE_CURRENT_BINARY_DIR}/XMS.sh
        @ONLY
    )
    # Ensure the build-folder script is executable for direct use pre-install
    execute_process(COMMAND ${CMAKE_COMMAND} -E chmod "+x" ${CMAKE_CURRENT_BINARY_DIR}/XMS.sh)
    install(
        FILES ${CMAKE_CURRENT_BINARY_DIR}/XMS.sh
        DESTINATION "${CMAKE_INSTALL_BINDIR}"
        RENAME "XMS"
        PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ
    )

    # -------------------------------------------------------------------------
    # Dev assets for running from the build tree (no install). We mirror a
    # minimal asset set into ${CMAKE_CURRENT_BINARY_DIR}/share/shell
    # so the launcher can find icons/sounds/fonts.
    # -------------------------------------------------------------------------
    set(_dev_shell_dir "${CMAKE_CURRENT_BINARY_DIR}/share/shell")
    file(MAKE_DIRECTORY "${_dev_shell_dir}/icons")
    file(MAKE_DIRECTORY "${_dev_shell_dir}/sounds")
    # Font
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/TypefaceServer/Play-Regular.ttf")
      configure_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/TypefaceServer/Play-Regular.ttf
        ${_dev_shell_dir}/Play-Regular.ttf COPYONLY)
    endif()
    # Sounds
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.clicker.Opt.wav")
      configure_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.clicker.Opt.wav
        ${_dev_shell_dir}/sounds/ok.wav COPYONLY)
    elseif(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.ui.Confirm.wav")
      configure_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.ui.Confirm.wav
        ${_dev_shell_dir}/sounds/ok.wav COPYONLY)
    endif()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.startup.ogg")
      configure_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.startup.ogg
        ${_dev_shell_dir}/sounds/startup.ogg COPYONLY)
    endif()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.startup.GameBoot.wav")
      configure_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/AudioServer/NSE.startup.GameBoot.wav
        ${_dev_shell_dir}/sounds/startup.wav COPYONLY)
    endif()
    # Icons (map available HomeMenu and settings placeholders)
    set(_icon_src_dir "${CMAKE_CURRENT_SOURCE_DIR}/interfaceFX/GraphicsServer/HomeMenu")
    if(EXISTS "${_icon_src_dir}/photo300.png")
      configure_file(${_icon_src_dir}/photo300.png ${_dev_shell_dir}/icons/icon_category_photo.png COPYONLY)
    endif()
    if(EXISTS "${_icon_src_dir}/music300.png")
      configure_file(${_icon_src_dir}/music300.png ${_dev_shell_dir}/icons/icon_category_music.png COPYONLY)
    endif()
    if(EXISTS "${_icon_src_dir}/movie300.png")
      configure_file(${_icon_src_dir}/movie300.png ${_dev_shell_dir}/icons/icon_category_video.png COPYONLY)
      configure_file(${_icon_src_dir}/movie300.png ${_dev_shell_dir}/icons/icon_category_tv.png COPYONLY)
    endif()
    if(EXISTS "${_icon_src_dir}/settings300.png")
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_category_settings.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_personalization.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_video.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_input.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_debug.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_toggle-background-blur.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_update.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_reset.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_bug.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_licenses.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_license.png COPYONLY)
      # Specific settings entries used in menus
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_background-type.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_language.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_vsync.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_sample-count.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_max-fps.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_controller-type.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_controller-rumble.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_controller-analog-stick.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_show-fps.png COPYONLY)
      configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_settings_show-mem.png COPYONLY)
    endif()
    if(EXISTS "${_icon_src_dir}/game300.png")
      configure_file(${_icon_src_dir}/game300.png ${_dev_shell_dir}/icons/icon_category_game.png COPYONLY)
      configure_file(${_icon_src_dir}/game300.png ${_dev_shell_dir}/icons/icon_category_application.png COPYONLY)
    endif()
    if(EXISTS "${_icon_src_dir}/network300.png")
      configure_file(${_icon_src_dir}/network300.png ${_dev_shell_dir}/icons/icon_category_network.png COPYONLY)
    endif()
    if(EXISTS "${_icon_src_dir}/friends350.png")
      configure_file(${_icon_src_dir}/friends350.png ${_dev_shell_dir}/icons/icon_category_users.png COPYONLY)
      configure_file(${_icon_src_dir}/friends350.png ${_dev_shell_dir}/icons/icon_category_friends.png COPYONLY)
    endif()
    # Placeholder default button icons to avoid load errors
    if(EXISTS "${_icon_src_dir}/settings300.png")
      foreach(_b left right up down ok cancel options extra)
        configure_file(${_icon_src_dir}/settings300.png ${_dev_shell_dir}/icons/icon_button_default_${_b}.png COPYONLY)
      endforeach()
    endif()
endif()

# Optional external dependencies when flags are enabled (best-effort)
if(ENABLE_DISC_MEDIA)
  find_package(PkgConfig QUIET)
  if(PkgConfig_FOUND)
    pkg_check_modules(BLURAY libbluray QUIET)
    pkg_check_modules(DVDREAD libdvdread QUIET)
    pkg_check_modules(DVDNAV libdvdnav QUIET)
    if(BLURAY_FOUND)
      target_link_libraries(XMS PRIVATE PkgConfig::BLURAY)
    endif()
    if(DVDREAD_FOUND)
      target_link_libraries(XMS PRIVATE PkgConfig::DVDREAD)
    endif()
    if(DVDNAV_FOUND)
      target_link_libraries(XMS PRIVATE PkgConfig::DVDNAV)
    endif()
  endif()
endif()
